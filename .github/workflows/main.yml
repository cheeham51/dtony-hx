name: Main

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
      id-token: write
      contents: read

jobs:
  publish_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.DEPLOY_ROLE_ARN }}
          aws-region: ap-southeast-2

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Set image tag
        id: set-img-tag
        run: |
          GIT_SHA=$(git rev-parse --short HEAD)
          VERSION_TAG="${GIT_SHA}"
          echo "tag=$VERSION_TAG" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          docker build -t ${{ vars.ECR_REPOSITORY_URI }}:${{ steps.set-img-tag.outputs.tag }} .
          docker tag ${{ vars.ECR_REPOSITORY_URI }}:${{ steps.set-img-tag.outputs.tag }} ${{ vars.ECR_REPOSITORY_URI }}:latest
          
      - name: Trivy scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ vars.ECR_REPOSITORY_URI }}:${{ steps.set-img-tag.outputs.tag }}
          format: table
          exit-code: 1
          ignore-unfixed: true
          severity: CRITICAL,HIGH

      - name: Push to ECR
        run: |
          docker push ${{ vars.ECR_REPOSITORY_URI }}:${{ steps.set-img-tag.outputs.tag }}
          docker push ${{ vars.ECR_REPOSITORY_URI }}:latest
      
      - name: Prepare task definition
        run: |
          envsubst < task-definition.template.json > task-definition.json
        env:
          ECS_EXEC_ROLE_ARN: ${{ vars.ECS_EXEC_ROLE_ARN }}
          ECS_TASK_ROLE_ARN: ${{ vars.ECS_TASK_ROLE_ARN }}
 
      - name: Render task definition with image
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: hx-app
          image: ${{ vars.ECR_REPOSITORY_URI }}:${{ steps.set-img-tag.outputs.tag }}

      - name: Show rendered task definition
        run: cat ${{ steps.render-task-def.outputs.task-definition }}
      
      - name: Deploy to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          service: hx-service
          cluster: hx-cluster
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          wait-for-service-stability: true



